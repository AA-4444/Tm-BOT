# bot.py
# pip install aiogram==3.7.0 httpx

import os, re, asyncio, logging, httpx
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
API_BASE = os.getenv("SEARCH_API_URL", "http://localhost:8000")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
def esc(s: str) -> str:
    return re.sub(r"[<>&]", lambda m: {"<":"&lt;",">":"&gt;","&":"&amp;"}[m.group(0)], s or "")

def parse_days(s: str, default=60):
    m = re.search(r"days:(\d+)", s)
    return int(m.group(1)) if m else default

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")],
        [KeyboardButton(text="üì£ –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

# ---------- –∫–æ–º–∞–Ω–¥—ã ----------
@dp.message(Command("start"))
async def start(m: types.Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∏—Å–∫–∞—Ç—å –ø—Ä–æ–º–æ-–ø–æ—Å—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã –≤ –∫–∞–∑–∏–Ω–æ-–Ω–∏—àe.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ üëá",
        reply_markup=main_kb
    )

@dp.message(Command("help"))
async def help_cmd(m: types.Message):
    await m.answer(
        "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏ <b>üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π</b> –∏ –≤–≤–µ–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "  (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—Ä–∏—Å–ø–∏–Ω—ã</i>).\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏ <b>üì£ –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤</b> –∏ –≤–≤–µ–¥–∏ —Ç–µ–º–∞—Ç–∏–∫—É\n"
        "  (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–∫–∞–∑–∏–Ω–æ –±–æ–Ω—É—Å</i>).\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–Ω–µ–π:\n"
        "<code>days:90</code> ‚Äî –∏—Å–∫–∞—Ç—å –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π."
    )

# ---------- –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ ----------
async def search_messages(query: str, days: int = 60):
    params = {"q": query, "days": days, "only_promo": "true", "only_public": "true", "no_spam": "true", "limit": 6}
    async with httpx.AsyncClient(timeout=30) as cli:
        r = await cli.get(f"{API_BASE}/search_messages", params=params)
        r.raise_for_status()
        return r.json().get("items", [])

async def search_chats(query: str, days: int = 90):
    params = {"q": query, "days": days, "only_promo": "true", "only_public": "true", "no_spam": "true", "limit": 8}
    async with httpx.AsyncClient(timeout=30) as cli:
        r = await cli.get(f"{API_BASE}/search_chats", params=params)
        r.raise_for_status()
        return r.json().get("items", [])

# ---------- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ----------
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
async def ask_msg_query(m: types.Message):
    await m.answer("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>—Ñ—Ä–∏—Å–ø–∏–Ω—ã days:60</code>")

@dp.message(F.text == "üì£ –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤")
async def ask_channel_query(m: types.Message):
    await m.answer("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–±–æ–Ω—É—Å –∫–∞–∑–∏–Ω–æ days:120</code>")

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(m: types.Message):
    await help_cmd(m)

# ---------- –æ–±—Ä–∞–±–æ—Ç–∫–∞ ¬´—Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞¬ª ----------
@dp.message()
async def handle_text(m: types.Message):
    txt = m.text.strip()
    if not txt:
        return
    days = parse_days(txt, default=60)
    query = re.sub(r"days:\d+","",txt).strip()

    # –ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    items = await search_messages(query, days)
    if items:
        lines = []
        for it in items:
            title = it["chat"] or it.get("chat_username") or "channel"
            date  = it["date"][:10]
            ch_url, msg_url = it.get("channel_url"), it.get("message_url")
            snippet = esc(it["snippet"])
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=msg_url)]] if msg_url else []
            )
            header = f"üß≠ <b>{esc(title)}</b>  <i>{esc(date)}</i>"
            await m.answer(f"{header}\n{snippet}", reply_markup=kb)
        return

    # –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π ‚Üí –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤
    channels = await search_chats(query, days)
    if channels:
        for ch in channels:
            title = ch["title"] or ch["chat"] or "channel"
            last = ch["last_post"][:10] if ch["last_post"] else "‚Äî"
            url = ch.get("channel_url")
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üì£ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=url)]] if url else []
            )
            await m.answer(f"üì£ <b>{esc(title)}</b>\n–ø–æ—Å–ª. –ø–æ—Å—Ç: <i>{esc(last)}</i>\n—Å–æ–æ–±—â–µ–Ω–∏–π: {ch['hits']}", reply_markup=kb)
        return

    await m.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É–≤–µ–ª–∏—á—å days.")

# ---------- entrypoint ----------
if __name__ == "__main__":
    async def runner():
        if not BOT_TOKEN:
            logging.error("‚ùå BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("‚úÖ Bot polling started")
        await dp.start_polling(bot)
    asyncio.run(runner())