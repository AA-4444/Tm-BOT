# bot.py
# pip install aiogram httpx python-dotenv
import os, re, asyncio, httpx
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

BOT_TOKEN = os.getenv("BOT_TOKEN","")
API_BASE = os.getenv("SEARCH_API_URL","http://localhost:8000")  # –±–µ–∑ /search

bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

def esc(s: str) -> str:
    return re.sub(r"[<>&]", lambda m: {"<":"&lt;",">":"&gt;","&":"&amp;"}[m.group(0)], s or "")

def parse_days(s: str, default=60):
    m = re.search(r"days:(\d+)", s)
    return int(m.group(1)) if m else default

@dp.message(Command("start"))
async def start(m: types.Message):
    await m.answer("–ü–æ–∏—Å–∫ –ø–æ –∫–∞–∑–∏–Ω–æ-–Ω–∏—àe.\n"
                   "–ö–æ–º–∞–Ω–¥—ã:\n"
                   "‚Ä¢ /search <–∑–∞–ø—Ä–æ—Å> [days:60]\n"
                   "‚Ä¢ /channels <–∑–∞–ø—Ä–æ—Å> [days:60]")

@dp.message(Command("search"))
async def search_cmd(m: types.Message):
    raw = m.text
    parts = raw.split(maxsplit=1)
    if len(parts) == 1:
        return await m.answer("–ü—Ä–∏–º–µ—Ä: /search –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—Ä–∏—Å–ø–∏–Ω—ã days:60")
    query = parts[1]
    days = parse_days(query)
    query = re.sub(r"days:\d+","",query).strip()

    params = {"q": query, "days": days, "only_promo": "true", "limit": 8}
    async with httpx.AsyncClient(timeout=25) as cli:
        r = await cli.get(f"{API_BASE}/search_messages", params=params)
        data = r.json()

    if not data.get("items"):
        return await m.answer("–ù–∏—á–µ–≥–æ —Å–≤–µ–∂–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å days.")

    lines = []
    for it in data["items"]:
        title = it["chat"] or "unknown"
        date  = it["date"][:10]
        snippet = it["snippet"]
        lines.append(f"üß≠ <b>{esc(title)}</b>  <i>{esc(date)}</i>\n{esc(snippet)}")
    await m.answer("\n\n".join(lines))

@dp.message(Command("channels"))
async def channels_cmd(m: types.Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) == 1:
        return await m.answer("–ü—Ä–∏–º–µ—Ä: /channels –±–µ–∑–¥–µ–ø–æ–∑–∏—Ç–Ω—ã–π –±–æ–Ω—É—Å days:90")
    query = parts[1]
    days = parse_days(query, default=90)
    query = re.sub(r"days:\d+","",query).strip()

    params = {"q": query, "days": days, "only_promo": "true", "limit": 10}
    async with httpx.AsyncClient(timeout=25) as cli:
        r = await cli.get(f"{API_BASE}/search_chats", params=params)
        data = r.json()

    if not data.get("items"):
        return await m.answer("–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –±–æ–ª—å—à–µ days.")
    lines = []
    for ch in data["items"]:
        name = ch["chat_username"] or ch["title"] or "channel"
        last = ch["last_post"][:10] if ch["last_post"] else "‚Äî"
        lines.append(f"üì£ <b>{esc(name)}</b>  (–ø–æ—Å–ª. –ø–æ—Å—Ç: {esc(last)})  ¬∑ hits: {ch['hits']}")
    await m.answer("\n".join(lines))

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
