# bot.py
# deps: aiogram==3.7.0 httpx
import os, sys
if os.getenv("ROLE") and os.getenv("ROLE") != "bot":
    sys.exit("BOT: ROLE != bot ‚Üí –≤—ã—Ö–æ–¥–∏–º")

import re, asyncio, logging, httpx
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
API_BASE  = os.getenv("SEARCH_API_URL", "http://localhost:8000")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")],
        [KeyboardButton(text="üì£ –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

def esc(s: str) -> str:
    return re.sub(r"[<>&]", lambda m: {"<":"&lt;",">":"&gt;","&":"&amp;"}[m.group(0)], s or "")

def parse_days(s: str, default=60):
    m = re.search(r"days:(\d+)", s)
    return int(m.group(1)) if m else default

@dp.message(Command("start"))
async def start(m: types.Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü–∏—à–∏ –∑–∞–ø—Ä–æ—Å (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å <code>days:90</code>)\n"
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=main_kb
    )

@dp.message(Command("help"))
async def help_cmd(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <code>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—Ä–∏—Å–ø–∏–Ω—ã days:60</code>\n"
        "‚Ä¢ <code>–ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∑–∏–Ω–æ days:120</code>\n"
        "‚Ä¢ <code>affiliate marketing days:150</code>\n\n"
        "–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥—ë—Ç—Å—è ‚Äî —è –ø–æ–ø—Ä–æ–±—É—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )

async def api_messages(params):
    async with httpx.AsyncClient(timeout=35) as cli:
        r = await cli.get(f"{API_BASE}/search_messages", params=params)
        r.raise_for_status()
        return r.json().get("items", [])

async def api_chats(params):
    async with httpx.AsyncClient(timeout=35) as cli:
        r = await cli.get(f"{API_BASE}/search_chats", params=params)
        r.raise_for_status()
        return r.json().get("items", [])

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
async def ask_msg(m: types.Message):
    await m.answer("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä.: <code>—Ñ—Ä–∏—Å–ø–∏–Ω—ã days:60</code>")

@dp.message(F.text == "üì£ –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤")
async def ask_ch(m: types.Message):
    await m.answer("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä.: <code>–±–æ–Ω—É—Å –∫–∞–∑–∏–Ω–æ days:120</code>")

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(m: types.Message):
    await help_cmd(m)

@dp.message()
async def handle(m: types.Message):
    txt = (m.text or "").strip()
    if not txt:
        return

    days = parse_days(txt, 60)
    query = re.sub(r"days:\d+", "", txt).strip()

    # 1) —É–∑–∫–∏–π –ø–æ–∏—Å–∫ (—Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã)
    p1 = dict(q=query, days=days, only_promo="true", only_public="true", no_spam="true", limit=6)
    posts = await api_messages(p1)

    if not posts:
        # 2) –∞–≤—Ç–æ-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: –±–æ–ª—å—à–µ –¥–Ω–µ–π –∏ –º—è–≥—á–µ —Ñ–∏–ª—å—Ç—Ä—ã
        p2 = dict(q=query, days=max(days, 365), only_promo="false", only_public="false", no_spam="false", limit=8)
        posts = await api_messages(p2)

    if posts:
        for it in posts:
            title = it["chat"] or it.get("chat_username") or "channel"
            date  = it["date"][:10]
            snippet = esc(it["snippet"])
            btn = None
            if it.get("message_url"):
                btn = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=it["message_url"])
                ]])
            await m.answer(f"üß≠ <b>{esc(title)}</b>  <i>{esc(date)}</i>\n{snippet}", reply_markup=btn)
        return

    # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –∫–∞–Ω–∞–ª—ã
    c1 = dict(q=query, days=days, only_promo="true", only_public="true", no_spam="true", limit=8)
    chans = await api_chats(c1)
    if not chans:
        c2 = dict(q=query, days=max(days, 365), only_promo="false", only_public="false", no_spam="false", limit=10)
        chans = await api_chats(c2)

    if chans:
        for ch in chans:
            title = ch["title"] or ch["chat"] or "channel"
            last = ch["last_post"][:10] if ch["last_post"] else "‚Äî"
            url  = ch.get("channel_url")
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üì£ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=url)]]) if url else None
            await m.answer(f"üì£ <b>{esc(title)}</b>\n–ø–æ—Å–ª. –ø–æ—Å—Ç: <i>{esc(last)}</i>\n—Å–æ–æ–±—â–µ–Ω–∏–π: {ch['hits']}", reply_markup=kb)
        return

    await m.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ –¥–æ–±–∞–≤—å <code>days:365</code>).")