# bot.py
# pip install aiogram==3.7.0 httpx
import os, re, asyncio, logging, httpx, time
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

logging.basicConfig(level=logging.INFO)
print("üîß Booting bot.py...")  # –æ—á–µ–Ω—å —Ä–∞–Ω–Ω–∏–π –ª–æ–≥ –≤ stdout

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
API_BASE  = os.getenv("SEARCH_API_URL", "")

# –†–∞–Ω–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å —è–≤–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN is missing in environment")
if not API_BASE:
    print("‚ùå SEARCH_API_URL is missing in environment")

def esc(s: str) -> str:
    return re.sub(r"[<>&]", lambda m: {"<":"&lt;",">":"&gt;","&":"&amp;"}[m.group(0)], s or "")

def parse_days(s: str, default=60):
    m = re.search(r"days:(\d+)", s)
    return int(m.group(1)) if m else default

# –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∞ ‚Äî –Ω–µ –≤—ã—Ö–æ–¥–∏–º –º–æ–ª—á–∞, –∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º —Å –ª–æ–≥–æ–º
if not BOT_TOKEN or not API_BASE:
    print("‚è∏ Bot not configured. Waiting here so you can see logs...")
    try:
        while True:
            time.sleep(30)
    except KeyboardInterrupt:
        pass
    raise SystemExit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø–æ–¥ aiogram 3.7.0+
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

@dp.message(Command("start"))
async def start(m: types.Message):
    await m.answer(
        "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∑–∏–Ω–æ-–Ω–∏—àe.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /search <–∑–∞–ø—Ä–æ—Å> [days:60]\n"
        "‚Ä¢ /channels <–∑–∞–ø—Ä–æ—Å> [days:60]"
    )

@dp.message(Command("search"))
async def search_cmd(m: types.Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) == 1:
        return await m.answer("–ü—Ä–∏–º–µ—Ä: /search –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—Ä–∏—Å–ø–∏–Ω—ã days:60")
    query = parts[1]
    days = parse_days(query)
    query = re.sub(r"days:\d+","",query).strip()

    params = {"q": query, "days": days, "only_promo": "true", "limit": 8}
    async with httpx.AsyncClient(timeout=25) as cli:
        r = await cli.get(f"{API_BASE}/search_messages", params=params)
        r.raise_for_status()
        data = r.json()

    if not data.get("items"):
        return await m.answer("‚ùå –ù–∏—á–µ–≥–æ —Å–≤–µ–∂–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å days.")

    lines = []
    for it in data["items"]:
        title = it["chat"] or "unknown"
        date  = it["date"][:10]
        snippet = it["snippet"]
        lines.append(f"üß≠ <b>{esc(title)}</b>  <i>{esc(date)}</i>\n{esc(snippet)}")

    await m.answer("\n\n".join(lines))

@dp.message(Command("channels"))
async def channels_cmd(m: types.Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) == 1:
        return await m.answer("–ü—Ä–∏–º–µ—Ä: /channels –±–µ–∑–¥–µ–ø–æ–∑–∏—Ç–Ω—ã–π –±–æ–Ω—É—Å days:90")
    query = parts[1]
    days = parse_days(query, default=90)
    query = re.sub(r"days:\d+","",query).strip()

    params = {"q": query, "days": days, "only_promo": "true", "limit": 10}
    async with httpx.AsyncClient(timeout=25) as cli:
        r = await cli.get(f"{API_BASE}/search_chats", params=params)
        r.raise_for_status()
        data = r.json()

    if not data.get("items"):
        return await m.answer("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É–≤–µ–ª–∏—á—å days.")

    lines = []
    for ch in data["items"]:
        name = ch["chat_username"] or ch["title"] or "channel"
        last = ch["last_post"][:10] if ch["last_post"] else "‚Äî"
        lines.append(f"üì£ <b>{esc(name)}</b>  (–ø–æ—Å–ª. –ø–æ—Å—Ç: {esc(last)})  ¬∑ hits: {ch['hits']}")

    await m.answer("\n".join(lines))

if __name__ == "__main__":
    async def runner():
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã–∫–ª—é—á–∏–º –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—ã–ª)
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("‚úÖ Bot polling started")
        await dp.start_polling(bot)

    asyncio.run(runner())