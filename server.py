# bot.py
# deps: aiogram==3.7.0 httpx

import os, re, asyncio, logging, httpx
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
API_BASE  = os.getenv("SEARCH_API_URL", "http://localhost:8000")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- UI ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")],
        [KeyboardButton(text="üì£ –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

def esc(s: str) -> str:
    return re.sub(r"[<>&]", lambda m: {"<":"&lt;",">":"&gt;","&":"&amp;"}[m.group(0)], s or "")

def parse_days(s: str, default=60):
    m = re.search(r"days:(\d+)", s)
    return int(m.group(1)) if m else default

# —Ä–µ–∂–∏–º ¬´—à–∏—Ä–æ–∫–æ–≥–æ¬ª –ø–æ–∏—Å–∫–∞ –Ω–∞ 1 –∑–∞–ø—Ä–æ—Å
user_wide: dict[int, bool] = {}

# --- Commands ---
@dp.message(Command("start"))
async def start(m: types.Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞–π–¥—É –ø—Ä–æ–º–æ-–ø–æ—Å—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã –≤ –∫–∞–∑–∏–Ω–æ-–Ω–∏—à–µ.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å.\n"
        "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–Ω–µ–π: <code>days:90</code>.",
        reply_markup=main_kb
    )

@dp.message(Command("help"))
async def help_cmd(m: types.Message):
    await m.answer(
        "‚ÑπÔ∏è <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤</b>:\n"
        "‚Ä¢ <code>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—Ä–∏—Å–ø–∏–Ω—ã days:60</code>\n"
        "‚Ä¢ <code>–ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∑–∏–Ω–æ days:120</code>\n"
        "‚Ä¢ <code>affiliate marketing days:150</code>\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ <b>/wide</b> ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (–º–µ–Ω—å—à–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤) –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å."
    )

@dp.message(Command("wide"))
async def wide(m: types.Message):
    user_wide[m.from_user.id] = True
    await m.answer("üîé –í–∫–ª—é—á—ë–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å.")

# --- API calls ---
async def api_search_messages(query: str, days: int, wide: bool):
    params = {
        "q": query,
        "days": days,
        "only_promo": "false" if wide else "true",
        "only_public": "true",
        "no_spam": "false" if wide else "true",
        "limit": 6
    }
    async with httpx.AsyncClient(timeout=30) as cli:
        r = await cli.get(f"{API_BASE}/search_messages", params=params)
        r.raise_for_status()
        return r.json().get("items", [])

async def api_search_chats(query: str, days: int, wide: bool):
    params = {
        "q": query,
        "days": days,
        "only_promo": "false" if wide else "true",
        "only_public": "true",
        "no_spam": "false" if wide else "true",
        "limit": 8
    }
    async with httpx.AsyncClient(timeout=30) as cli:
        r = await cli.get(f"{API_BASE}/search_chats", params=params)
        r.raise_for_status()
        return r.json().get("items", [])

# --- Buttons handlers ---
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
async def ask_msg_query(m: types.Message):
    await m.answer("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>—Ñ—Ä–∏—Å–ø–∏–Ω—ã days:60</code>")

@dp.message(F.text == "üì£ –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤")
async def ask_channel_query(m: types.Message):
    await m.answer("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–±–æ–Ω—É—Å –∫–∞–∑–∏–Ω–æ days:120</code>")

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(m: types.Message):
    await help_cmd(m)

# --- Free text: —Å–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –∫–∞–Ω–∞–ª—ã ---
@dp.message()
async def handle_text(m: types.Message):
    txt = (m.text or "").strip()
    if not txt:
        return

    days = parse_days(txt, default=60)
    query = re.sub(r"days:\d+", "", txt).strip()
    wide = user_wide.pop(m.from_user.id, False)

    # 1) –°–æ–æ–±—â–µ–Ω–∏—è
    posts = await api_search_messages(query, days, wide)
    if posts:
        for it in posts:
            title = it["chat"] or it.get("chat_username") or "channel"
            date  = it["date"][:10]
            ch_url, msg_url = it.get("channel_url"), it.get("message_url")
            snippet = esc(it["snippet"])
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=msg_url)]] if msg_url else []
            )
            header = f"üß≠ <b>{esc(title)}</b>  <i>{esc(date)}</i>"
            await m.answer(f"{header}\n{snippet}", reply_markup=kb)
        return

    # 2) –ö–∞–Ω–∞–ª—ã
    chans = await api_search_chats(query, days, wide)
    if chans:
        for ch in chans:
            title = ch["title"] or ch["chat"] or "channel"
            last = ch["last_post"][:10] if ch["last_post"] else "‚Äî"
            url  = ch.get("channel_url")
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üì£ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=url)]] if url else []
            )
            await m.answer(f"üì£ <b>{esc(title)}</b>\n–ø–æ—Å–ª. –ø–æ—Å—Ç: <i>{esc(last)}</i>\n—Å–æ–æ–±—â–µ–Ω–∏–π: {ch['hits']}", reply_markup=kb)
        return

    await m.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É–≤–µ–ª–∏—á—å <code>days</code>.\n"
                   "–ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: /wide")

# --- Entrypoint ---
if __name__ == "__main__":
    async def runner():
        if not BOT_TOKEN or not API_BASE:
            logging.error("‚ùå BOT_TOKEN/SEARCH_API_URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("‚úÖ Bot polling started")
        await dp.start_polling(bot)
    asyncio.run(runner())